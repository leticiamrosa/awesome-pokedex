{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\leehm\\\\Documents\\\\GitHub\\\\awesome-pokedex\\\\awesome-pokedex\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\leehm\\\\Documents\\\\GitHub\\\\awesome-pokedex\\\\awesome-pokedex\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar apiServe = 'https://pokeapi.co/api/v2/pokemon/';\nvar host = 'https://pokeapi.co/api/v2/';\nexport function getPokemon(pokemon, url) {\n  return {\n    type: 'POKEMON_SHOW_LIST',\n    pokemon: pokemon,\n    url: url\n  };\n}\nexport function getImagePokemon(img) {\n  return {\n    type: 'POKEMON_SHOW_IMAGE',\n    img: img\n  };\n}\nexport function getPokemonForName(pokemon) {\n  return {\n    type: 'POKEMON_SEARCH_SUCCESS',\n    pokemon: pokemon,\n    name: pokemon.name,\n    img: pokemon.sprites\n  };\n}\nexport function errorPokemonForName(pokemon) {\n  return {\n    type: 'POKEMON_SEARCH_ERROR',\n    error: pokemon.error\n  };\n} // export function getAllPokemons() {\n//   return (dispatch) => {\n//     axios.get(apiServe)\n//       .then((response) => {\n//         const data = response.data.results;\n//         dispatch(getPokemon(data));\n//         data.map(url => (\n//           axios.get(url.url)\n//             .then((pokemonUrl) => console.log(pokemonUrl))\n//         ));\n//       }).catch((error) => {\n//         dispatch(errorPokemonForName(error));\n//       });\n//   };\n// }\n\nfunction getAllPokemons() {\n  return _getAllPokemons.apply(this, arguments);\n}\n\nfunction _getAllPokemons() {\n  _getAllPokemons = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"\".concat(host, \"pokemon\"));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context2.sent;\n            _context2.next = 9;\n            return Array.from(data.results).map(function (el) {\n              return el.url;\n            }).map(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(el) {\n                var responseEl, dataEl;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return fetch(el);\n\n                      case 2:\n                        responseEl = _context.sent;\n                        _context.next = 5;\n                        return responseEl.json();\n\n                      case 5:\n                        dataEl = _context.sent;\n                        console.log(dataEl);\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0.message);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 11]]);\n  }));\n  return _getAllPokemons.apply(this, arguments);\n}\n\ngetAllPokemons();\nexport function searchPokemonForName(pokemon) {\n  return function (dispatch) {\n    axios.get(apiServe + pokemon).then(function (response) {\n      dispatch(getPokemonForName(response.data));\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\leehm\\Documents\\GitHub\\awesome-pokedex\\awesome-pokedex\\src\\store\\actions\\index.js"],"names":["axios","apiServe","host","getPokemon","pokemon","url","type","getImagePokemon","img","getPokemonForName","name","sprites","errorPokemonForName","error","getAllPokemons","fetch","response","json","data","Array","from","results","map","el","responseEl","dataEl","console","log","message","searchPokemonForName","dispatch","get","then"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,oCAAjB;AACA,IAAMC,IAAI,GAAG,4BAAb;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,GAA7B,EAAkC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAE,mBADD;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,GAAG,EAAHA;AAHK,GAAP;AAKD;AAED,OAAO,SAASE,eAAT,CAAyBC,GAAzB,EAA8B;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,GAAG,EAAHA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,iBAAT,CAA2BL,OAA3B,EAAoC;AACzC,SAAO;AACLE,IAAAA,IAAI,EAAE,wBADD;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLM,IAAAA,IAAI,EAAEN,OAAO,CAACM,IAHT;AAILF,IAAAA,GAAG,EAAEJ,OAAO,CAACO;AAJR,GAAP;AAMD;AAED,OAAO,SAASC,mBAAT,CAA6BR,OAA7B,EAAsC;AAC3C,SAAO;AACLE,IAAAA,IAAI,EAAE,sBADD;AAELO,IAAAA,KAAK,EAAET,OAAO,CAACS;AAFV,GAAP;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SAIeC,c;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEyBC,KAAK,WAAIb,IAAJ,aAF9B;;AAAA;AAEQc,YAAAA,QAFR;AAAA;AAAA,mBAGqBA,QAAQ,CAACC,IAAT,EAHrB;;AAAA;AAGQC,YAAAA,IAHR;AAAA;AAAA,mBAKUC,KAAK,CAACC,IAAN,CAAWF,IAAI,CAACG,OAAhB,EAAyBC,GAAzB,CAA6B,UAACC,EAAD,EAAQ;AACzC,qBAAOA,EAAE,CAAClB,GAAV;AACD,aAFK,EAEHiB,GAFG;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEC,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACkBR,KAAK,CAACQ,EAAD,CADvB;;AAAA;AACDC,wBAAAA,UADC;AAAA;AAAA,+BAEcA,UAAU,CAACP,IAAX,EAFd;;AAAA;AAEDQ,wBAAAA,MAFC;AAGLC,wBAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFD;;AAAA;AAAA;AAAA;AAAA,gBALV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaIC,YAAAA,OAAO,CAACb,KAAR,CAAc,aAAEe,OAAhB;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBAd,cAAc;AAGd,OAAO,SAASe,oBAAT,CAA8BzB,OAA9B,EAAuC;AAC5C,SAAO,UAAC0B,QAAD,EAAc;AACnB9B,IAAAA,KAAK,CAAC+B,GAAN,CAAU9B,QAAQ,GAAGG,OAArB,EAA8B4B,IAA9B,CAAmC,UAAChB,QAAD,EAAc;AAC/Cc,MAAAA,QAAQ,CAACrB,iBAAiB,CAACO,QAAQ,CAACE,IAAV,CAAlB,CAAR;AACD,KAFD;AAGD,GAJD;AAKD","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiServe = 'https://pokeapi.co/api/v2/pokemon/';\r\nconst host = 'https://pokeapi.co/api/v2/';\r\n\r\nexport function getPokemon(pokemon, url) {\r\n  return {\r\n    type: 'POKEMON_SHOW_LIST',\r\n    pokemon,\r\n    url,\r\n  };\r\n}\r\n\r\nexport function getImagePokemon(img) {\r\n  return {\r\n    type: 'POKEMON_SHOW_IMAGE',\r\n    img,\r\n  }\r\n}\r\n\r\nexport function getPokemonForName(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SEARCH_SUCCESS',\r\n    pokemon,\r\n    name: pokemon.name,\r\n    img: pokemon.sprites,\r\n  };\r\n}\r\n\r\nexport function errorPokemonForName(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SEARCH_ERROR',\r\n    error: pokemon.error,\r\n  };\r\n}\r\n\r\n// export function getAllPokemons() {\r\n//   return (dispatch) => {\r\n//     axios.get(apiServe)\r\n//       .then((response) => {\r\n//         const data = response.data.results;\r\n//         dispatch(getPokemon(data));\r\n//         data.map(url => (\r\n//           axios.get(url.url)\r\n//             .then((pokemonUrl) => console.log(pokemonUrl))\r\n//         ));\r\n//       }).catch((error) => {\r\n//         dispatch(errorPokemonForName(error));\r\n//       });\r\n//   };\r\n// }\r\n\r\n\r\n\r\nasync function getAllPokemons() {\r\n  try {\r\n    let response = await fetch(`${host}pokemon`);\r\n    let data = await response.json();\r\n    \r\n    await Array.from(data.results).map((el) => {\r\n      return el.url\r\n    }).map(async (el) => {\r\n      let responseEl = await fetch(el);\r\n      let dataEl = await responseEl.json();\r\n      console.log(dataEl);\r\n    })\r\n  } catch (e) {\r\n    console.error(e.message)\r\n  }\r\n}\r\n\r\ngetAllPokemons();\r\n\r\n\r\nexport function searchPokemonForName(pokemon) {\r\n  return (dispatch) => {\r\n    axios.get(apiServe + pokemon).then((response) => {\r\n      dispatch(getPokemonForName(response.data));\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}