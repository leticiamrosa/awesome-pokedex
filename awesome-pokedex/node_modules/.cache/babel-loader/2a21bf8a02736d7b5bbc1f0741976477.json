{"ast":null,"code":"import axios from 'axios';\nvar apiServe = 'https://pokeapi.co/api/v2/pokemon/?limit=';\nvar apiImage = 'http://pokestadium.com/sprites/xy/';\nvar pokemons = [];\nvar pokemonConfig = [];\nexport function getPokemon(pokemon, image) {\n  return {\n    type: 'GET_POKEMON',\n    pokemon: pokemon,\n    image: image\n  };\n}\nexport function getPokemonError(error) {\n  return {\n    type: 'GET_POKEMON_ERROR',\n    error: error\n  };\n}\nexport function pokemonPagination(limit) {\n  return {\n    type: 'SHOW_PAGINATION',\n    limit: limit\n  };\n}\nexport function updatePokemonPagination(limit) {\n  return function (dispatch) {\n    console.log('estou funcionando');\n    dispatch(pokemonPagination(limit));\n  };\n}\nexport function responsePokemonData(response, dispatch) {\n  var data = response.data.results;\n  data.map(function (pokemon) {\n    return pokemons.push(pokemon.url);\n  });\n  pokemons.forEach(function (pokemon) {\n    axios.get(pokemon).then(function (res) {\n      var abi = res.data;\n      pokemonConfig.push(abi);\n      pokemonConfig.sort(function (a, b) {\n        return a.id - b.id;\n      });\n      dispatch(getPokemon(pokemonConfig, apiImage));\n    }).catch(function (error) {\n      dispatch(getPokemonError(error));\n    });\n  });\n}\nexport function getAllPokemons(limitNumber) {\n  return function (dispatch) {\n    axios.get(apiServe + limitNumber).then(function (response) {\n      responsePokemonData(response, dispatch);\n    }).catch(function (error) {\n      console.error(error);\n      dispatch(getPokemonError(error));\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\leehm\\Documents\\GitHub\\awesome-pokedex\\awesome-pokedex\\src\\store\\actions\\getPokemon.js"],"names":["axios","apiServe","apiImage","pokemons","pokemonConfig","getPokemon","pokemon","image","type","getPokemonError","error","pokemonPagination","limit","updatePokemonPagination","dispatch","console","log","responsePokemonData","response","data","results","map","push","url","forEach","get","then","res","abi","sort","a","b","id","catch","getAllPokemons","limitNumber"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,2CAAjB;AACA,IAAMC,QAAQ,GAAG,oCAAjB;AACA,IAAMC,QAAQ,GAAG,EAAjB;AACA,IAAMC,aAAa,GAAG,EAAtB;AAGA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,KAA7B,EAAoC;AACzC,SAAO;AACLC,IAAAA,IAAI,EAAE,aADD;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD;AAED,OAAO,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,SAAO;AACLJ,IAAAA,IAAI,EAAE,iBADD;AAELI,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,uBAAT,CAAiCD,KAAjC,EAAwC;AAC7C,SAAO,UAACE,QAAD,EAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAF,IAAAA,QAAQ,CAACH,iBAAiB,CAACC,KAAD,CAAlB,CAAR;AACD,GAHD;AAID;AAED,OAAO,SAASK,mBAAT,CAA6BC,QAA7B,EAAuCJ,QAAvC,EAAiD;AACtD,MAAMK,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcC,OAA3B;AACAD,EAAAA,IAAI,CAACE,GAAL,CAAS,UAAAf,OAAO;AAAA,WAAIH,QAAQ,CAACmB,IAAT,CAAchB,OAAO,CAACiB,GAAtB,CAAJ;AAAA,GAAhB;AACApB,EAAAA,QAAQ,CAACqB,OAAT,CAAiB,UAAClB,OAAD,EAAa;AAC5BN,IAAAA,KAAK,CAACyB,GAAN,CAAUnB,OAAV,EACGoB,IADH,CACQ,UAACC,GAAD,EAAS;AACb,UAAMC,GAAG,GAAGD,GAAG,CAACR,IAAhB;AACAf,MAAAA,aAAa,CAACkB,IAAd,CAAmBM,GAAnB;AACAxB,MAAAA,aAAa,CAACyB,IAAd,CAAmB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAnB;AAAA,OAAnB;AACAlB,MAAAA,QAAQ,CAACT,UAAU,CAACD,aAAD,EAAgBF,QAAhB,CAAX,CAAR;AACD,KANH,EAMK+B,KANL,CAMW,UAACvB,KAAD,EAAW;AAClBI,MAAAA,QAAQ,CAACL,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KARH;AASD,GAVD;AAWD;AAED,OAAO,SAASwB,cAAT,CAAwBC,WAAxB,EAAqC;AAC1C,SAAO,UAACrB,QAAD,EAAc;AACnBd,IAAAA,KAAK,CAACyB,GAAN,CAAUxB,QAAQ,GAAGkC,WAArB,EACGT,IADH,CACQ,UAACR,QAAD,EAAc;AAClBD,MAAAA,mBAAmB,CAACC,QAAD,EAAWJ,QAAX,CAAnB;AACD,KAHH,EAGKmB,KAHL,CAGW,UAACvB,KAAD,EAAW;AAClBK,MAAAA,OAAO,CAACL,KAAR,CAAcA,KAAd;AACAI,MAAAA,QAAQ,CAACL,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KANH;AAOD,GARD;AASD","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiServe = 'https://pokeapi.co/api/v2/pokemon/?limit=';\r\nconst apiImage = 'http://pokestadium.com/sprites/xy/';\r\nconst pokemons = [];\r\nconst pokemonConfig = [];\r\n\r\n\r\nexport function getPokemon(pokemon, image) {\r\n  return {\r\n    type: 'GET_POKEMON',\r\n    pokemon,\r\n    image,\r\n  };\r\n}\r\n\r\nexport function getPokemonError(error) {\r\n  return {\r\n    type: 'GET_POKEMON_ERROR',\r\n    error,\r\n  };\r\n}\r\n\r\nexport function pokemonPagination(limit) {\r\n  return {\r\n    type: 'SHOW_PAGINATION',\r\n    limit,\r\n  };\r\n}\r\n\r\nexport function updatePokemonPagination(limit) {\r\n  return (dispatch) => {\r\n    console.log('estou funcionando');\r\n    dispatch(pokemonPagination(limit));\r\n  };\r\n}\r\n\r\nexport function responsePokemonData(response, dispatch) {\r\n  const data = response.data.results;\r\n  data.map(pokemon => pokemons.push(pokemon.url));\r\n  pokemons.forEach((pokemon) => {\r\n    axios.get(pokemon)\r\n      .then((res) => {\r\n        const abi = res.data;\r\n        pokemonConfig.push(abi);\r\n        pokemonConfig.sort((a, b) => a.id - b.id);\r\n        dispatch(getPokemon(pokemonConfig, apiImage));\r\n      }).catch((error) => {\r\n        dispatch(getPokemonError(error));\r\n      });\r\n  });\r\n}\r\n\r\nexport function getAllPokemons(limitNumber) {\r\n  return (dispatch) => {\r\n    axios.get(apiServe + limitNumber)\r\n      .then((response) => {\r\n        responsePokemonData(response, dispatch);\r\n      }).catch((error) => {\r\n        console.error(error);\r\n        dispatch(getPokemonError(error));\r\n      });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}