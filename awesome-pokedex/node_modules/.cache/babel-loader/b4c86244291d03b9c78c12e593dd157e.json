{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\leehm\\\\Documents\\\\GitHub\\\\awesome-pokedex\\\\awesome-pokedex\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\leehm\\\\Documents\\\\GitHub\\\\awesome-pokedex\\\\awesome-pokedex\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar apiServe = 'https://pokeapi.co/api/v2/pokemon/';\nvar host = 'https://pokeapi.co/api/v2/';\nexport function getPokemon(pokemon, url) {\n  return {\n    type: 'POKEMON_SHOW_LIST',\n    pokemon: pokemon,\n    url: url\n  };\n}\nexport function getImagePokemon(img) {\n  return {\n    type: 'POKEMON_SHOW_IMAGE',\n    img: img\n  };\n}\nexport function getPokemonForName(pokemon) {\n  return {\n    type: 'POKEMON_SEARCH_SUCCESS',\n    pokemon: pokemon,\n    name: pokemon.name,\n    img: pokemon.sprites\n  };\n}\nexport function errorPokemonForName(pokemon) {\n  return {\n    type: 'POKEMON_SEARCH_ERROR',\n    error: pokemon.error\n  };\n} // export function getAllPokemons() {\n//   return (dispatch) => {\n//     axios.get(apiServe)\n//       .then((response) => {\n//         const data = response.data.results;\n//         dispatch(getPokemon(data));\n//         data.map(url => (\n//           axios.get(url.url)\n//             .then((pokemonUrl) => console.log(pokemonUrl))\n//         ));\n//       }).catch((error) => {\n//         dispatch(errorPokemonForName(error));\n//       });\n//   };\n// }\n// async function getAllPokemons() {\n//   try {\n//     let response = await fetch(`${host}pokemon`);\n//     let data = await response.json();\n//     await Array.from(data.results).map((el) => {\n//       return el.url\n//     }).map(async (el) => {\n//       let response = await fetch(el);\n//       let data = await response.json();\n//       console.log(data)\n//     })\n//   } catch (e) {\n//     console.error(e.message)\n//   }\n// }\n// getAllPokemons();\n\nfunction getAllPokemons() {\n  return _getAllPokemons.apply(this, arguments);\n}\n\nfunction _getAllPokemons() {\n  _getAllPokemons = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\",\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(dispatch) {\n                var data;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.prev = 0;\n                        _context2.next = 3;\n                        return axios.get(\"\".concat(host, \"pokemon\"));\n\n                      case 3:\n                        data = _context2.sent;\n                        _context2.next = 6;\n                        return data.data.results.map(function (pokemon) {\n                          return pokemon.url;\n                        }).map(\n                        /*#__PURE__*/\n                        function () {\n                          var _ref2 = _asyncToGenerator(\n                          /*#__PURE__*/\n                          _regeneratorRuntime.mark(function _callee(pokemon) {\n                            var responsePokemon;\n                            return _regeneratorRuntime.wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    _context.next = 2;\n                                    return axios.get(pokemon);\n\n                                  case 2:\n                                    responsePokemon = _context.sent;\n                                    dispatch(getPokemon(responsePokemon));\n                                    console.log(responsePokemon.data);\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }));\n\n                          return function (_x2) {\n                            return _ref2.apply(this, arguments);\n                          };\n                        }());\n\n                      case 6:\n                        _context2.next = 11;\n                        break;\n\n                      case 8:\n                        _context2.prev = 8;\n                        _context2.t0 = _context2[\"catch\"](0);\n                        console.error(_context2.t0.message);\n\n                      case 11:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[0, 8]]);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllPokemons.apply(this, arguments);\n}\n\ngetAllPokemons();\nexport function searchPokemonForName(pokemon) {\n  return function (dispatch) {\n    axios.get(apiServe + pokemon).then(function (response) {\n      dispatch(getPokemonForName(response.data));\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\leehm\\Documents\\GitHub\\awesome-pokedex\\awesome-pokedex\\src\\store\\actions\\index.js"],"names":["axios","apiServe","host","getPokemon","pokemon","url","type","getImagePokemon","img","getPokemonForName","name","sprites","errorPokemonForName","error","getAllPokemons","dispatch","get","data","results","map","responsePokemon","console","log","message","searchPokemonForName","then","response"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,oCAAjB;AACA,IAAMC,IAAI,GAAG,4BAAb;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,GAA7B,EAAkC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAE,mBADD;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,GAAG,EAAHA;AAHK,GAAP;AAKD;AAED,OAAO,SAASE,eAAT,CAAyBC,GAAzB,EAA8B;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,GAAG,EAAHA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,iBAAT,CAA2BL,OAA3B,EAAoC;AACzC,SAAO;AACLE,IAAAA,IAAI,EAAE,wBADD;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLM,IAAAA,IAAI,EAAEN,OAAO,CAACM,IAHT;AAILF,IAAAA,GAAG,EAAEJ,OAAO,CAACO;AAJR,GAAP;AAMD;AAED,OAAO,SAASC,mBAAT,CAA6BR,OAA7B,EAAsC;AAC3C,SAAO;AACLE,IAAAA,IAAI,EAAE,sBADD;AAELO,IAAAA,KAAK,EAAET,OAAO,CAACS;AAFV,GAAP;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;SAEeC,c;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACS,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEgBf,KAAK,CAACgB,GAAN,WAAad,IAAb,aAFhB;;AAAA;AAEGe,wBAAAA,IAFH;AAAA;AAAA,+BAGGA,IAAI,CAACA,IAAL,CAAUC,OAAV,CAAkBC,GAAlB,CAAsB,UAACf,OAAD,EAAa;AACvC,iCAAOA,OAAO,CAACC,GAAf;AACD,yBAFK,EAEHc,GAFG;AAAA;AAAA;AAAA;AAAA;AAAA,mDAEC,iBAAOf,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACyBJ,KAAK,CAACgB,GAAN,CAAUZ,OAAV,CADzB;;AAAA;AACCgB,oCAAAA,eADD;AAELL,oCAAAA,QAAQ,CAACZ,UAAU,CAACiB,eAAD,CAAX,CAAR;AACAC,oCAAAA,OAAO,CAACC,GAAR,CAAYF,eAAe,CAACH,IAA5B;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFD;;AAAA;AAAA;AAAA;AAAA,4BAHH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWHI,wBAAAA,OAAO,CAACR,KAAR,CAAc,aAAEU,OAAhB;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADT;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBAT,cAAc;AAGd,OAAO,SAASU,oBAAT,CAA8BpB,OAA9B,EAAuC;AAC5C,SAAO,UAACW,QAAD,EAAc;AACnBf,IAAAA,KAAK,CAACgB,GAAN,CAAUf,QAAQ,GAAGG,OAArB,EAA8BqB,IAA9B,CAAmC,UAACC,QAAD,EAAc;AAC/CX,MAAAA,QAAQ,CAACN,iBAAiB,CAACiB,QAAQ,CAACT,IAAV,CAAlB,CAAR;AACD,KAFD;AAGD,GAJD;AAKD","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiServe = 'https://pokeapi.co/api/v2/pokemon/';\r\nconst host = 'https://pokeapi.co/api/v2/';\r\n\r\nexport function getPokemon(pokemon, url) {\r\n  return {\r\n    type: 'POKEMON_SHOW_LIST',\r\n    pokemon,\r\n    url,\r\n  };\r\n}\r\n\r\nexport function getImagePokemon(img) {\r\n  return {\r\n    type: 'POKEMON_SHOW_IMAGE',\r\n    img,\r\n  }\r\n}\r\n\r\nexport function getPokemonForName(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SEARCH_SUCCESS',\r\n    pokemon,\r\n    name: pokemon.name,\r\n    img: pokemon.sprites,\r\n  };\r\n}\r\n\r\nexport function errorPokemonForName(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SEARCH_ERROR',\r\n    error: pokemon.error,\r\n  };\r\n}\r\n\r\n// export function getAllPokemons() {\r\n//   return (dispatch) => {\r\n//     axios.get(apiServe)\r\n//       .then((response) => {\r\n//         const data = response.data.results;\r\n//         dispatch(getPokemon(data));\r\n//         data.map(url => (\r\n//           axios.get(url.url)\r\n//             .then((pokemonUrl) => console.log(pokemonUrl))\r\n//         ));\r\n//       }).catch((error) => {\r\n//         dispatch(errorPokemonForName(error));\r\n//       });\r\n//   };\r\n// }\r\n\r\n// async function getAllPokemons() {\r\n//   try {\r\n//     let response = await fetch(`${host}pokemon`);\r\n//     let data = await response.json();\r\n    \r\n//     await Array.from(data.results).map((el) => {\r\n//       return el.url\r\n//     }).map(async (el) => {\r\n//       let response = await fetch(el);\r\n//       let data = await response.json();\r\n//       console.log(data)\r\n//     })\r\n//   } catch (e) {\r\n//     console.error(e.message)\r\n//   }\r\n// }\r\n\r\n// getAllPokemons();\r\n\r\nasync function getAllPokemons() {\r\n  return async (dispatch) => {\r\n    try {\r\n      const data = await axios.get(`${host}pokemon`);\r\n      await data.data.results.map((pokemon) => {\r\n        return pokemon.url;\r\n      }).map(async (pokemon) => {\r\n        const responsePokemon = await axios.get(pokemon);\r\n        dispatch(getPokemon(responsePokemon));\r\n        console.log(responsePokemon.data);\r\n      })\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    }\r\n  };\r\n}\r\n\r\ngetAllPokemons();\r\n\r\n\r\nexport function searchPokemonForName(pokemon) {\r\n  return (dispatch) => {\r\n    axios.get(apiServe + pokemon).then((response) => {\r\n      dispatch(getPokemonForName(response.data));\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}