{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\leehm\\\\Documents\\\\GitHub\\\\awesome-pokedex\\\\awesome-pokedex\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\leehm\\\\Documents\\\\GitHub\\\\awesome-pokedex\\\\awesome-pokedex\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar apiServe = 'https://pokeapi.co/api/v2/pokemon/';\nexport function getPokemon(pokemon) {\n  return {\n    type: 'POKEMON_SHOW_LIST',\n    pokemon: pokemon,\n    img: pokemon.sprites\n  };\n}\nexport function getPokemonForName(pokemon) {\n  return {\n    type: 'POKEMON_SEARCH_SUCCESS',\n    pokemon: pokemon,\n    name: pokemon.name,\n    img: pokemon.sprites\n  };\n}\nexport function errorPokemonForName(pokemon) {\n  return {\n    type: 'POKEMON_SEARCH_ERROR',\n    error: pokemon.error\n  };\n} // export function getAllPokemons() {\n//   return (dispatch) => {\n//     axios.get(apiServe)\n//       .then((response) => {\n//         dispatch(getPokemon(response.data.results));\n//       }).catch((error) => {\n//         dispatch(errorPokemonForName(error));\n//       });\n//   };\n// }\n\nexport function getAllPokemons() {\n  return _getAllPokemons.apply(this, arguments);\n}\n\nfunction _getAllPokemons() {\n  _getAllPokemons = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var data, urls, pokemons;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return axios.get(apiServe);\n\n          case 3:\n            data = _context2.sent;\n            _context2.next = 6;\n            return Array.from(data).map(function (el) {\n              return el.url;\n            });\n\n          case 6:\n            urls = _context2.sent;\n            _context2.next = 9;\n            return Array.from(urls).forEach(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(el) {\n                var allPokemons;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return axios.get(urls);\n\n                      case 2:\n                        allPokemons = _context.sent;\n                        return _context.abrupt(\"return\", allPokemons);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 9:\n            pokemons = _context2.sent;\n            dispatch(getPokemon(pokemons));\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 13]]);\n  }));\n  return _getAllPokemons.apply(this, arguments);\n}\n\nexport function searchPokemonForName(pokemon) {\n  return function (dispatch) {\n    axios.get(apiServe + pokemon).then(function (response) {\n      dispatch(getPokemonForName(response.data));\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\leehm\\Documents\\GitHub\\awesome-pokedex\\awesome-pokedex\\src\\store\\actions\\index.js"],"names":["axios","apiServe","getPokemon","pokemon","type","img","sprites","getPokemonForName","name","errorPokemonForName","error","getAllPokemons","get","data","Array","from","map","el","url","urls","forEach","allPokemons","pokemons","dispatch","console","log","searchPokemonForName","then","response"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,oCAAjB;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAE,mBADD;AAELD,IAAAA,OAAO,EAAPA,OAFK;AAGLE,IAAAA,GAAG,EAAEF,OAAO,CAACG;AAHR,GAAP;AAKD;AAED,OAAO,SAASC,iBAAT,CAA2BJ,OAA3B,EAAoC;AACzC,SAAO;AACLC,IAAAA,IAAI,EAAE,wBADD;AAELD,IAAAA,OAAO,EAAPA,OAFK;AAGLK,IAAAA,IAAI,EAAEL,OAAO,CAACK,IAHT;AAILH,IAAAA,GAAG,EAAEF,OAAO,CAACG;AAJR,GAAP;AAMD;AAED,OAAO,SAASG,mBAAT,CAA6BN,OAA7B,EAAsC;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE,sBADD;AAELM,IAAAA,KAAK,EAAEP,OAAO,CAACO;AAFV,GAAP;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEcX,KAAK,CAACY,GAAN,CAAUX,QAAV,CAFd;;AAAA;AAECY,YAAAA,IAFD;AAAA;AAAA,mBAGcC,KAAK,CAACC,IAAN,CAAWF,IAAX,EAAiBG,GAAjB,CAAqB,UAAAC,EAAE;AAAA,qBAAIA,EAAE,CAACC,GAAP;AAAA,aAAvB,CAHd;;AAAA;AAGCC,YAAAA,IAHD;AAAA;AAAA,mBAKkBL,KAAK,CAACC,IAAN,CAAWI,IAAX,EAAiBC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAyB,iBAAOH,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACpBjB,KAAK,CAACY,GAAN,CAAUO,IAAV,CADoB;;AAAA;AACxCE,wBAAAA,WADwC;AAAA,yDAErCA,WAFqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAzB;;AAAA;AAAA;AAAA;AAAA,gBALlB;;AAAA;AAKCC,YAAAA,QALD;AASHC,YAAAA,QAAQ,CAACrB,UAAU,CAACoB,QAAD,CAAX,CAAR;AATG;AAAA;;AAAA;AAAA;AAAA;AAWHE,YAAAA,OAAO,CAACC,GAAR;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeP,OAAO,SAASC,oBAAT,CAA8BvB,OAA9B,EAAuC;AAC5C,SAAO,UAACoB,QAAD,EAAc;AACnBvB,IAAAA,KAAK,CAACY,GAAN,CAAUX,QAAQ,GAAGE,OAArB,EAA8BwB,IAA9B,CAAmC,UAACC,QAAD,EAAc;AAC/CL,MAAAA,QAAQ,CAAChB,iBAAiB,CAACqB,QAAQ,CAACf,IAAV,CAAlB,CAAR;AACD,KAFD;AAGD,GAJD;AAKD","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiServe = 'https://pokeapi.co/api/v2/pokemon/';\r\n\r\nexport function getPokemon(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SHOW_LIST',\r\n    pokemon,\r\n    img: pokemon.sprites,\r\n  };\r\n}\r\n\r\nexport function getPokemonForName(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SEARCH_SUCCESS',\r\n    pokemon,\r\n    name: pokemon.name,\r\n    img: pokemon.sprites,\r\n  };\r\n}\r\n\r\nexport function errorPokemonForName(pokemon) {\r\n  return {\r\n    type: 'POKEMON_SEARCH_ERROR',\r\n    error: pokemon.error,\r\n  };\r\n}\r\n\r\n// export function getAllPokemons() {\r\n//   return (dispatch) => {\r\n//     axios.get(apiServe)\r\n//       .then((response) => {\r\n//         dispatch(getPokemon(response.data.results));\r\n//       }).catch((error) => {\r\n//         dispatch(errorPokemonForName(error));\r\n//       });\r\n//   };\r\n// }\r\n\r\nexport async function getAllPokemons() {\r\n  try {\r\n    let data = await axios.get(apiServe);\r\n    let urls = await Array.from(data).map(el => el.url);\r\n\r\n    let pokemons = await Array.from(urls).forEach(async (el) => {\r\n      let allPokemons = await axios.get(urls)\r\n      return allPokemons\r\n    })\r\n    dispatch(getPokemon(pokemons))\r\n  } catch(e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function searchPokemonForName(pokemon) {\r\n  return (dispatch) => {\r\n    axios.get(apiServe + pokemon).then((response) => {\r\n      dispatch(getPokemonForName(response.data));\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}